devtools::install_github('rstudio/shinyapps')
shinyapps::setAccountInfo(name='isaias-dt9-assignment',
token='B3A87273A3962247C87D4367ABDC7080',
secret='ohb91vm0JeC0KDZXaCGBTTo47JeOz67k6+sONRkM')
library(shiny)
runExample("01_hello")
setwd("~/Personal/courses/2014.My Data Science Specialization/09.Developing Data Products/assignment/dt9.assignment/FuelConsumption")
runApp("./")
runApp("./")
runApp("./")
runApp("./")
runApp("./")
runApp("./")
runApp("./")
runApp("./")
runApp("./")
runApp("./")
runApp("./")
runApp("./")
runApp("./")
mtcars
names(mtcars)
row.names(mtcars)
mtcars
?data
runApp("./")
?mtcars
runApp("./")
data(mtcars)
?mtcars
library(datasets)
min(mtcars)
?tapply()
sapply(mtcars,min)
sapply(mtcars,min)[2]
runApp("./")
?plotOutput
runApp("./")
steps=(maxs-mins/10)
steps
mins
max
maxs
runApp("./")
runApp("./")
runApp("./")
print(time)
runApp("./")
q
runApp("./")
runApp("./")
runApp("./")
runApp("./")
runApp("./")
runApp("./")
mins=sapply(mtcars,min)
maxs=sapply(mtcars,max)
steps=(maxs-mins/10)  # surprinsinly, this works well for binary factor vars suchs as am !!
options(error = recover)
steps
maxs
steps=(maxs-mins)  # surprinsinly, this works well for binary factor vars suchs as am !!
steps
steps/10
steps=(maxs-mins)/10.
steps
runApp("./")
?mtcars
runApp("./")
1
runApp("./")
0
runApp("./")
runApp("./")
runApp("./")
runApp("./")
runApp("./")
runApp("./")
runApp("./")
runApp("./")
runApp("./")
runApp("./")
runApp("./")
?sliderInput
runApp("./")
0
runApp("./")
runApp("./")
runApp("./")
runApp("./")
runApp("./")
runApp("./")
runApp("./")
runApp("./")
runApp("./")
runApp("./")
runApp("./")
runApp("./")
runApp("./")
runApp("./")
runApp("./")
runApp("./")
runApp("./")
runApp("./")
runApp("./")
runApp("./")
runApp("./")
?verbatimTextOutput
runApp("./")
runApp("./")
?column
runApp("./")
runApp("./")
runApp("./")
runApp("./")
runApp("./")
var.name <- c("Number of cylinders:" , "Displacement (cu.in.):" ,
"Gross horsepower:" ,  "Rear axle ratio:" ,
"Weight (in lb/1000):",        "0.25 miles time:"
"V/S?",  ": Manual Transmission?" ,
"Number of forward gears:", "Number of carburetors:" )
var.name <- c("Number of cylinders:" , "Displacement (cu.in.):" ,
"Gross horsepower:" ,  "Rear axle ratio:" ,
"Weight (in lb/1000):",        "0.25 miles time:"
"V/S?",  ": Manual Transmission?" ,
"Number of forward gears:", "Number of carburetors:" )
var.name <- c("Number of cylinders:" , "Displacement (cu.in.):" ,
"Gross horsepower:" ,  "Rear axle ratio:" ,
"Weight (in lb/1000):",        "0.25 miles time:",
"V/S?",  ": Manual Transmission?" ,
"Number of forward gears:", "Number of carburetors:" )
var.name
var.name[1]
var.name[2]
class(var.name)
var.names <- c("Number of cylinders:" , "Displacement (cu.in.):" ,
"Gross horsepower:" ,  "Rear axle ratio:" ,
"Weight (in lb/1000):",        "0.25 miles time:",
"V/S?",  ": Manual Transmission?" ,
"Number of forward gears:", "Number of carburetors:" )
./runApp("./")
runApp("./")
runApp("./")
./runApp("./")
runApp("./")
runApp("./")
runApp("./")
runApp("./")
runApp("./")
runApp("./")
runApp("./")
?
hr
?vr
runApp("./")
runApp("./")
runApp("./")
?renderPrint
runApp("./")
runApp("./")
runApp("./")
runApp("./")
?getParams
?reactive
runApp("./")
fit<-lm(mpg~., mtcars)
fit$coefficients
runApp("./")
runApp("./")
?grid
runApp("./")
runApp("./")
runApp("./")
?renderPlot
runApp("./")
runApp("./")
runApp("./")
runApp("./")
runApp("./")
runApp("./")
runApp("./")
runApp("./")
?predict
?predict
predict
predict
runApp("./")
library(shiny)
runApp("./")
predict
names(mtcars)
var.colnames <- names(mtcars)
mins=sapply(mtcars,min)
maxs=sapply(mtcars,max)
steps=(maxs-mins)/10.
var.names <- c("Fuel per mile (in gallons/mile)",
"Number of cylinders:" , "Displacement (cu.in.):" ,
"Gross horsepower:" ,  "Rear axle ratio:" ,
"Weight (in lb/1000):",        "0.25 miles time:",
"V/S?",  ": Manual Transmission?" ,
"Number of forward gears:", "Number of carburetors:" )
var.colnames <- names(mtcars)
class(mtcars)
runApp("./")
runApp("./")
runApp("./")
runApp("./")
runApp("./")
cat(class(input))
runApp("./")
runApp("./")
data
dat
dat<-data.frame(mpg=NA);
dat["mpg"] <- 4
dat
dat<-data.frame(mpg=NA);
dat["cyl"] <- 4
dat
dat
runApp("./")
runApp("./")
runApp("./")
runApp("./")
runApp("./")
runApp("./")
runApp("./")
runApp("./")
runApp("./")
runApp("./")
runApp("./")
runApp("./")
runApp("./")
fitall<-lm(mpg~., mtcars)
fitall
fitall$model
fitall
runApp("./")
runApp("./")
runApp("./")
runApp("./")
runApp("./")
runApp("./")
runApp("./")
runApp("./")
runApp("./")
runApp("./")
runApp("./")
runApp("./")
runApp("./")
runApp("./")
?h3
runApp("./")
runApp("./")
runApp("./")
runApp("./")
names(mtcars)
runApp("./")
runApp("./")
runApp("./")
runApp("./")
runApp("./")
runApp("./")
runApp("./")
runApp("./")
runApp("./")
runApp("./")
?mtcars
runApp("./")
mins=sapply(mtcars,min)
maxs=sapply(mtcars,max)
steps=(maxs-mins)/10.  ;
steps[2]<-1.; steps[10]<-1. ; steps[11]<-1.
var.names <- c("Miles per gallon of fuel:",
"Number of cylinders:" , "Displacement (cu.in.):" ,
"Gross horsepower:" ,  "Rear axle ratio:" ,
"Weight (in lb/1000):",        "0.25 miles time:",
"V/S?",  ": Manual Transmission?" ,
"Number of forward gears:", "Number of carburetors:" )
var.colnames <- names(mtcars)
var.names[-1]
?lm
?lm.fit
fitall<-lm(mpg~., mtcars)
class(fitall)
plot(fitall)
par(mfrow=c(2,2))
plot(fitall)
runApp("./")
runApp("./")
runApp("./")
runApp("./")
runApp("./")
runApp("./")
runApp("./")
runApp("./")
?warning
runApp("./")
runApp("./")
runApp("./")
runApp("./")
runApp("./")
runApp("./")
runApp("./")
runApp("./")
runApp("./")
runApp("./")
Q
runApp("./")
runApp("./")
runApp("./")
runApp("./")
runApp("./")
runApp("./")
runApp("./")
?sink
runApp("./")
runApp("./")
sin()
sink()
runApp("./")
runApp("./")
runApp("./")
runApp("./")
runApp("./")
Q
runApp("./")
runApp("./")
runApp("./")
myfit
myfit[[1]]
runApp("./")
runApp("./")
fit<-myfit
fit
fit[@]
fit[3]
fit()
myfit
runApp("./")
myfit
myfit()
myfit
runApp("./")
runApp("./")
summary(myfit)
fitall$residuals
runApp("./")
runApp("./")
runApp("./")
runApp("./")
?swicht
?switch
switch(1, invisible(pi), pi)
switch(2, invisible(pi), pi)
runApp("./")
runApp("./")
runApp("./")
runApp("./")
runApp("./")
runApp("./")
runApp("./")
dat
selectedcols
input[["group_analysis"]]
?checkboxGroupInput
runApp("./")
selectedcols
plot()
plot("",main="Se")
plot(NULL,main="Se")
plot(c(0,1),main="Se")
plot(c(0,1),main="Please, select at least one predictor")
runApp("./")
runApp("./")
selectedcols
input[["group_analysis"]]
?checkboxGroupInput
runApp("./")
?selectedcols
selectedcols
quit
runApp("./")
quit
runApp("./")
runApp("./")
runApp("./")
runApp("./")
runApp("./")
runApp("./")
runApp("./")
runApp("./")
runApp("./")
runApp("./")
runApp("./")
runApp("./")
?plot
par(bg=NA)
par(bg="red")
plot(fitall)
runApp("./")
runApp("./")
runApp("./")
par(bg="red")
par(bg="yellow")
runApp("./")
plot(fitall)
runApp("./")
runApp("./")
runApp("./")
runApp("./")
runApp("./")
?color
?colors
?colors
runApp("./")
runApp("./")
?rgb
runApp("./")
runApp("./")
runApp("./")
runApp("./")
runApp("./")
(0.6,.85,.95,1)*255
c(0.6,.85,.95,1)*255
?hex
runApp("./")
runApp("./")
runApp("./")
runApp("./")
runApp("./")
runApp("./")
runApp("./")
runApp("./")
runApp("./")
runApp("./")
runApp("./")
runApp("./")
runApp("./")
runApp("./")
runApp("./")
runApp("./")
runApp("./")
